package com.example.diplom

import android.content.Intent
import android.os.Bundle
import android.view.View
import android.widget.AdapterView
import android.widget.ArrayAdapter
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.appcompat.app.AppCompatDelegate
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.lifecycle.lifecycleScope
import com.example.diplom.DataBase.Material
import com.example.diplom.DataBase.Provider
import com.example.diplom.DataBase.ReceiveMaterial
import com.example.diplom.DataBase.SendMaterial
import com.example.diplom.databinding.ActivityMainBinding
import io.realm.kotlin.Realm
import io.realm.kotlin.RealmConfiguration
import io.realm.kotlin.ext.query
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import io.realm.kotlin.ext.toRealmList

class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding
    private lateinit var config: RealmConfiguration
    private lateinit var realm: Realm

    override fun onCreate(savedInstanceState: Bundle?) {
        binding = ActivityMainBinding.inflate(layoutInflater)
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContentView(binding.root)

        AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)
        ViewCompat.setOnApplyWindowInsetsListener(binding.main) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Realm
        config = RealmConfiguration.Builder(
            schema = setOf(Material::class, Provider::class, ReceiveMaterial::class, SendMaterial::class)
        ).build()
        realm = Realm.open(config)

        // üëá –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑
        insertDefaultProviders()
        insertDefaultMaterial()
        insertDefaultAdress()
        insertDefaultReceiveMaterial()

        binding.ButtonLogin.setOnClickListener {
            startActivity(Intent(this@MainActivity, MaterialView::class.java))
        }

        binding.AddProvider.setOnClickListener {
            startActivity(Intent(this@MainActivity, AddProvider::class.java))
        }
    }

    private fun insertDefaultProviders() {
        CoroutineScope(Dispatchers.IO).launch {
            realm.write {
                val existing = this.query<Provider>().find()
                delete(existing) // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏

                val providerNames = listOf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–õ–µ—Ä—É–∞–ú–µ—Ä–ª–µ–Ω", "–ü–µ—Ç—Ä–æ–≤–∏—á", "–û–±–∏")
                providerNames.forEach { name ->
                    copyToRealm(Provider().apply {
                        nameProvider = name
                    })
                }
            }
        }
    }


    private fun insertDefaultMaterial() {
        CoroutineScope(Dispatchers.IO).launch {
            realm.write {
                val existing = this.query<Material>().find()
                delete(existing) // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏

                val materials = listOf(
                    Material().apply {
                        nameMaterial = "–ë—Ä—É—Å 150x150"
                        category = "–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
                        quantity = 100
                        unit = "–º"
                    },
                    Material().apply {
                        nameMaterial = "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞ Rotband"
                        category = "–û—Ç–¥–µ–ª–∫–∞"
                        quantity = 30
                        unit = "—à—Ç"
                    },
                    Material().apply {
                        nameMaterial = "–ü—Ä–æ–≤–æ–¥ –í–í–ì–Ω–≥ 3x2.5"
                        category = "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞"
                        quantity = 200
                        unit = "–º"
                    },
                    Material().apply {
                        nameMaterial = "–°–∞–º–æ—Ä–µ–∑—ã –ø–æ –¥–µ—Ä–µ–≤—É"
                        category = "–ö—Ä–µ–ø–µ–∂ –∏ –º–æ–Ω—Ç–∞–∂"
                        quantity = 500
                        unit = "—à—Ç"
                    },
                    Material().apply {
                        nameMaterial = "–ü–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω–æ–≤–∞—è —Ç—Ä—É–±–∞"
                        category = "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞"
                        quantity = 50
                        unit = "–º"
                    }
                )
                materials.forEach { copyToRealm(it) }
            }
        }
    }

    private fun insertDefaultReceiveMaterial() {
        CoroutineScope(Dispatchers.IO).launch {
            realm.write {
                val existing = this.query<ReceiveMaterial>().find()
                delete(existing)  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏

                // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å
                val providers = this.query<Provider>().find()
                val materials = this.query<Material>().find()

                if (providers.isNotEmpty() && materials.isNotEmpty()) {
                    val receiveMaterials = listOf(
                        ReceiveMaterial().apply {
                            provider = providers[1]
                            material = materials[0]
                            quantity = 50
                            receivedAt = "01.06.2025"
                        },
                        ReceiveMaterial().apply {
                            provider = providers[2 % providers.size]
                            material = materials[1 % materials.size]
                            quantity = 10
                            receivedAt = "02.06.2025"
                        },
                        ReceiveMaterial().apply {
                            provider = providers[3 % providers.size]
                            material = materials[2 % materials.size]
                            quantity = 100
                            receivedAt = "03.06.2025"
                        }
                    )
                    receiveMaterials.forEach { copyToRealm(it) }
                }
            }
        }
    }

    private fun insertDefaultAdress() {
        lifecycleScope.launch(Dispatchers.IO) {
            realm.write {
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ SendMaterial
                val existing = this.query<SendMaterial>().find()
                delete(existing)

                val materials = this.query<Material>().find()

                if (materials.isNotEmpty()) {
                    val sendMaterials = listOf(
                        SendMaterial().apply {
                            nameAddress = "–°–∞–¥–æ–≤–∞—è 4"
                            material = materials[0]
                            quantity = 23
                            sentAt = "04.06.2025"
                        },
                        SendMaterial().apply {
                            nameAddress = "–£–ª. –ü—É—à–∫–∏–Ω–∞ 25"
                            material = materials[1 % materials.size]
                            quantity = 7
                            sentAt = "05.06.2025"
                        },
                        SendMaterial().apply {
                            nameAddress = "–£–ª. –ö—É—Ä—Å–∫–∞ 2"
                            material = materials[2 % materials.size]
                            quantity = 64
                            sentAt = "06.06.2025"
                        }
                    )
                    // –î–æ–±–∞–≤–ª—è–µ–º –≤ Realm –≤—Å–µ –∑–∞–ø–∏—Å–∏
                    sendMaterials.forEach { copyToRealm(it) }
                }
            }
        }
    }
}